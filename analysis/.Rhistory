library("readxl")
library("tidyverse")
library("lme4")
library("haven")
library("sjlabelled")
library("data.table")
library("scales")
library("eurostat")
library("RColorBrewer")
library("psych")
##### Set WD
setwd("/Users/caroline/Desktop/PhD/P1_incentives/analysis")
##### Load data sets
# Eurobarometer (2014 wave)
eurobarometer_data_raw = read_dta("../data/Eurobarometer/ZA5931_v3-0-0.dta")
# Incentive data
incentive_data_raw = read.csv("../data/expert_survey/incentive_data.csv")
################################################################
##### Process and combine data sets
# Select relevant variables
eurobarometer_data = select(eurobarometer_data_raw, uniqid, nuts, nutslvl, isocntry, qe1_1, qe1_2, qe3_2, qe3_3, qe3_4, qe3_5, d15a, d60, qe5a_7, qe5a_8, d40b, d25, d11, d8r2, d10, d7)
incentive_data = select(incentive_data_raw, -WB_incentive_financial_comment, -plasma_incentive_financial_comment, -WB_incentive_time_comment, -plasma_incentive_time_comment)
# Remove labels
eurobarometer_data = remove_all_labels(eurobarometer_data)
eurobarometer_data = zap_formats(eurobarometer_data)
# Rename columns
eurobarometer_data = rename(eurobarometer_data,
IM_help_people = qe3_2,
IM_alleviate_shortages = qe3_3,
IM_medical_research = qe3_4,
EM_get_return_raw = qe3_5,
EM_occupation = d15a,
EM_diff_paying_bills = d60,
social_norm_financial = qe5a_7,
social_norm_time = qe5a_8,
cost_children_in_household = d40b,
cost_type_of_community = d25,
age_raw = d11,
education = d8r2,
gender = d10,
marital_status = d7)
# Recode country code
eurobarometer_data$country_code = ifelse(eurobarometer_data$isocntry == "DE-W", "DE",
ifelse(eurobarometer_data$isocntry == "DE-E", "DE",
ifelse(eurobarometer_data$isocntry == "GB-GBN", "GB",
ifelse(eurobarometer_data$isocntry == "GB-NIR", "GB", eurobarometer_data$isocntry))))
# Change country_code format for merging
incentive_data$country_code = as.character(incentive_data$country_code)
# Merge datasets based on country
data = left_join(eurobarometer_data, incentive_data, by="country_code")
##### Preprocess combined dataset for analysis
# Variable transformations
data = data %>%
mutate(donate_blood = ifelse(qe1_1 == 1 | qe1_1 == 2, 1, 0),
donate_plasma = ifelse(qe1_2 == 1 | qe1_2 == 2, 1, 0),
IM_raw = ifelse(IM_help_people == 1 | IM_alleviate_shortages == 1 | IM_medical_research == 1, 1, 0),
EM_not_employed = ifelse(EM_occupation == 1 | EM_occupation == 2 | EM_occupation == 3 | EM_occupation == 4, 1, 0),
EM_employed = ifelse(EM_occupation == 1 | EM_occupation == 2 | EM_occupation == 3 | EM_occupation == 4, 0, 1),
education = ifelse(education == 11, 0, ifelse(education == 10 & age_raw>19, 3, ifelse(education == 10, NA, education))),
living_with_partner = ifelse(marital_status > 0 & marital_status < 9, 1, 0),
EM_diff_paying_bills = ifelse(EM_diff_paying_bills == 1, 2, ifelse(EM_diff_paying_bills == 2, 1, ifelse(EM_diff_paying_bills == 3, 0, NA))),
cost_type_of_community = ifelse(cost_type_of_community == 1, 2, ifelse(cost_type_of_community == 2, 1, ifelse(cost_type_of_community == 3, 0, NA))),
gender = gender - 1)%>%
mutate(IM = ifelse(is.na(IM_raw), 0, IM_raw),
EM_get_return = ifelse(is.na(EM_get_return_raw), 0, EM_get_return_raw))%>%
select(-IM_help_people, -IM_alleviate_shortages, -IM_medical_research, -EM_occupation, -marital_status) #, -qe1_1, -qe1_2)
# Aggregate social norms from individual responses at country level
social_norms = data%>%
group_by(country_code)%>%
summarize(soc_financial_raw = mean(social_norm_financial),
soc_time_raw = mean(social_norm_time))%>%
#mutate(soc_financial_biased = scales::rescale(soc_financial_raw, to = c(-1, 1), from = c(0,0.5)))%>%
mutate(soc_financial = scales::rescale(soc_financial_raw, to = c(-1, 1), from = c(0,1)),
soc_time = scales::rescale(soc_time_raw, to = c(-1, 1), from = c(0,1)))
# Add social norm data to dataset
data_full = left_join(data, social_norms, by="country_code")
# # Incentives x EM and SOC interaction: Social norms and extrinsic motivation are only unequal to zero when incentives are offered
# data_full = data_full%>%
#   mutate(EM_get_return_fin_incentives_WB = EM_get_return * WB_incentive_financial,
#          EM_diff_paying_bills_fin_incentives_WB = EM_diff_paying_bills * WB_incentive_financial,
#          EM_not_employed_fin_incentives_WB = EM_not_employed * WB_incentive_financial,
#          EM_get_return_fin_incentives_plasma = EM_get_return * plasma_incentive_financial,
#          EM_diff_paying_bills_fin_incentives_plasma = EM_diff_paying_bills * plasma_incentive_financial,
#          EM_not_employed_fin_incentives_plasma = EM_not_employed * plasma_incentive_financial,
#          soc_financial_incentives_WB = soc_financial * WB_incentive_financial,
#          soc_financial_incentives_plasma = soc_financial * plasma_incentive_financial,
#          #soc_financial_biased_incentives_WB = soc_financial_biased * WB_incentive_financial,
#          #soc_financial_biased_incentives_plasma = soc_financial_biased * plasma_incentive_financial,
#          EM_get_return_time_incentives_WB = EM_get_return * WB_incentive_time,
#          EM_employed_time_incentives_WB = EM_employed * WB_incentive_time,
#          EM_get_return_time_incentives_plasma = EM_get_return * plasma_incentive_time,
#          EM_employed_time_incentives_plasma = EM_employed * plasma_incentive_time,
#          soc_time_incentives_WB = soc_time * WB_incentive_time,
#          soc_time_incentives_plasma = soc_time * plasma_incentive_time)
# Convert variables to right format
data_full = data_full%>%
mutate(donate_blood = as.factor(donate_blood),
donate_plasma = as.factor(donate_plasma),
cost_type_of_community = as.factor(cost_type_of_community),
education = as.factor(education),
gender = as.factor(gender),
country_code = as.factor(country_code),
IM = as.factor(IM),
living_with_partner = as.factor(living_with_partner),
# EM_get_return_fin_incentives_WB = as.factor(EM_get_return_fin_incentives_WB),
# EM_diff_paying_bills_fin_incentives_WB = as.factor(EM_diff_paying_bills_fin_incentives_WB),
# EM_not_employed_fin_incentives_WB = as.factor(EM_not_employed_fin_incentives_WB),
# EM_get_return_fin_incentives_plasma = as.factor(EM_get_return_fin_incentives_plasma),
# EM_diff_paying_bills_fin_incentives_plasma = as.factor(EM_diff_paying_bills_fin_incentives_plasma),
# EM_not_employed_fin_incentives_plasma = as.factor(EM_not_employed_fin_incentives_plasma),
# EM_get_return_time_incentives_WB = as.factor(EM_get_return_time_incentives_WB),
# EM_employed_time_incentives_WB = as.factor(EM_employed_time_incentives_WB),
# EM_get_return_time_incentives_plasma = as.factor(EM_get_return_time_incentives_plasma),
# EM_employed_time_incentives_plasma = as.factor(EM_employed_time_incentives_plasma),
EM_get_return = as.factor(EM_get_return),
EM_diff_paying_bills = as.factor(EM_diff_paying_bills),
EM_not_employed = as.factor(EM_not_employed),
EM_employed = as.factor(EM_employed),
WB_incentive_financial = as.factor(WB_incentive_financial),
plasma_incentive_financial = as.factor(plasma_incentive_financial),
WB_incentive_time = as.factor(WB_incentive_time),
plasma_incentive_time = as.factor(plasma_incentive_time))
################################################################
##### Descriptives: number of respondents
## Raw data: number of respondents
nrow(data_full) # 27868
# Remove invalid data
data_WB = filter(data_full, !is.na(donate_blood))
nrow(data_WB) # 27082
(nrow(data_full) - nrow(data_WB)) / nrow(data_full) # 2.8%
data_plasma = filter(data_full, !is.na(donate_plasma))
nrow(data_plasma) # 25240
(nrow(data_full) - nrow(data_plasma)) / nrow(data_full) # 9.4%
data_plasma = data_plasma%>% # For plasma donation, respondents from countries that don't (or barely) collect plasma are excluded
mutate(country = as.character(country))%>%
filter(country != "Lithuania" & country != "Ireland" & country != "Cyprus" & country != "Greece" & country != "Croatia" & country != "United Kingdom")%>%
mutate(country = as.factor(country))
nrow(data_plasma) # 19923
(nrow(data_full) - nrow(data_plasma)) / nrow(data_full) # 28.5%
(25240 - 19923) / 27868 # 19.1 % additionally excluded due to no plasma donation in country
# Remove respondents under 18
data_full = filter(data_full, age_raw > 17)
data_WB = filter(data_WB, age_raw > 17)
nrow(data_WB) # 26532
(27082 - 26532) / 27868 # 2.0 % additionally excluded due to age (WB)
data_plasma = filter(data_plasma, age_raw > 17)
(nrow(data_full) - nrow(data_plasma)) / nrow(data_full) # 28.3%
nrow(data_plasma) # 19562
(19923 - 19562) / 27868 # 1.3 % additionally excluded due to age (plasma)
# For whole blood donation, 2.8% of the participants refused to answer the dependent variable question on donation behavior
# and were excluded from the sample. Similarly, 9.4% of respondents did not answer the question concerning for plasma donation during the lifetime.
# Moreover, an additional 19.1 % of respondents were excluded for the analyses of plasma donation, as they resided in
data_full$age = scale(data_full$age_raw)
data_full$cost_children_in_household = scale(data_full$cost_children_in_household)
data_full$soc_financial_normalized = scale(data_full$soc_financial_raw)
data_full$soc_time_normalized = scale(data_full$soc_time_raw)
# 6A) Whole blood
m6_wb = glmer(donate_blood ~ age + gender + living_with_partner + education + EM_not_employed + EM_diff_paying_bills + cost_children_in_household + cost_type_of_community + IM + EM_get_return*WB_incentive_financial + soc_financial_normalized*WB_incentive_financial + (1|country), data = data_full, family = "binomial")
summary(m6_wb)
