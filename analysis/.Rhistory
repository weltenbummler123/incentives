europe.clipped <- suppressWarnings(st_intersection(europe, st_sfc(europe.bbox, crs=st_crs(europe))))
### Calculate country-level data and add to map data
# Calculate country-level variables
data_maps = data%>%
group_by(country_code)%>%
summarize(donate_blood_agg = mean(as.numeric(as.character(donate_blood)), na.rm=T),
EM_get_return_agg = mean(as.numeric(as.character(EM_get_return)), na.rm=T),
IM_agg = mean(as.numeric(as.character(IM)), na.rm=T),
incentive_financial = mean(as.numeric(as.character(incentive_financial))),
incentive_time = mean(as.numeric(as.character(incentive_time))),
soc_financial_raw = mean(soc_financial_raw),
soc_time_raw = mean(soc_time_raw))%>%
rename(iso_a2 = country_code)%>%
mutate(iso_a2 = as.character(iso_a2),
incentive_financial = as.factor(incentive_financial),
incentive_time = as.factor(incentive_time))%>%
mutate(incentive_financial = recode(incentive_financial, "0"="no blood\noperators", "0.5"="some blood\noperators", "1"="all blood\noperators"),
incentive_time = recode(incentive_time, "0"="no blood\noperators", "0.5"="dependent\non employer", "1"="all blood\noperators"))
# Add to map data
map_data = left_join(europe.clipped, data_maps, by="iso_a2")
### Make maps
ggplot(map_data, aes(fill=donate_blood_agg)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name='Country-level mean\nblood donation', direction = -1, labels=scales::percent, option="plasma") +
labs(x=NULL, y=NULL, title=NULL)+
ggsave("plots/maps/blood_donation.png", width = 7, height = 5.7, units = "in")#+
#ggsave(file="plots/maps/blood_donation.pdf")
ggplot(map_data, aes(fill=EM_get_return_agg)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name='', direction = -1, labels=scales::percent) +
labs(x=NULL, y=NULL, title="(B) Country-level mean extrinsic motivation (getting sth. in return)")+
theme(legend.position="bottom", legend.direction = "horizontal", legend.key.width = unit(1,"cm"), plot.title = element_text(hjust = 0.5))+
ggsave("plots/maps/EM_get_return.png", width = 5.7, height = 5.5, units = "in")
ggplot(map_data, aes(fill=IM_agg)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name='', direction = -1, labels=scales::percent) +
labs(x=NULL, y=NULL, title="(A) Country-level mean intrinsic motivation")+
theme(legend.position="bottom", legend.direction = "horizontal", legend.key.width = unit(1,"cm"), plot.title = element_text(hjust = 0.5))+
ggsave("plots/maps/IM.png", width = 5.7, height = 5.5, units = "in")
a = ggplot(data=subset(map_data, sovereignt != "Belarus" & sovereignt != "Ukraine" & sovereignt != "Moldova"), aes(fill=soc_financial_raw)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name='', direction = 1, na.value = "grey92", labels=scales::percent) +
labs(x=NULL, y=NULL, title="Social norm\nregarding financial incentives")+
theme(legend.position="bottom", legend.direction = "horizontal", legend.key.width = unit(1.3,"cm"), plot.title = element_text(hjust = 0.5))+
ggsave("plots/maps/soc_financial.png", width = 4.5, height = 5.5, units = "in")+
ggsave(file="plots/maps/soc_financial.pdf", width = 4.5, height = 5.5, units = "in")
b = ggplot(data=subset(map_data, sovereignt != "Belarus" & sovereignt != "Ukraine" & sovereignt != "Moldova"), aes(fill=soc_time_raw)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name='', direction = 1, na.value = "grey92", labels=scales::percent) +
labs(x=NULL, y=NULL, title="Social norm\nregarding time incentives")+
theme(legend.position="bottom", legend.direction = "horizontal", legend.key.width = unit(1.3,"cm"), plot.title = element_text(hjust = 0.5))+
ggsave("plots/maps/soc_time.png", width = 4.5, height = 5.5, units = "in")+
ggsave(file="plots/maps/soc_time.pdf", width = 4.5, height = 5.5, units = "in")
c = ggplot(data=subset(map_data, sovereignt != "Belarus" & sovereignt != "Ukraine" & sovereignt != "Moldova"), aes(fill=incentive_financial)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name= "", discrete=TRUE, direction = 1, na.translate = F) +
labs(x=NULL, y=NULL, title="Financial incentives offered")+
theme(legend.position="bottom", legend.direction = "horizontal", legend.key.width = unit(0.7,"cm"), plot.title = element_text(hjust = 0.5))+
#guides(fill = FALSE) +
ggsave("plots/maps/incentive_financial.png", width = 4.5, height = 5.5, units = "in")+
ggsave(file="plots/maps/incentive_financial.pdf", width = 4.5, height = 5.5, units = "in")
d = ggplot(data=subset(map_data, sovereignt != "Belarus" & sovereignt != "Ukraine" & sovereignt != "Moldova"), aes(fill=incentive_time)) +
geom_sf(alpha=0.8,col='white') +
coord_sf(crs="+proj=aea +lat_1=36.333333333333336 +lat_2=65.66666666666667 +lon_0=14") +
viridis::scale_fill_viridis(name= "", discrete=TRUE, direction = 1, na.translate = F) +
labs(x=NULL, y=NULL, title="Time incentives offered")+
theme(legend.position="bottom", legend.direction = "horizontal", legend.key.width = unit(0.7,"cm"), plot.title = element_text(hjust = 0.5))+
#guides(fill = FALSE) +
ggsave("plots/maps/incentive_time.png", width = 4.5, height = 5.5, units = "in")+
ggsave(file="plots/maps/incentive_time.pdf", width = 4.5, height = 5.5, units = "in")
# Make combined plot for paper
ggarrange(a, b, c, d,
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2) +
#ggsave("plots/maps/combined_maps.png", width = 6.8, height = 8, units = "in") +
ggsave(file="plots/maps/combined_maps.pdf", width = 6.8, height = 8, units = "in")
##############################################################################
####### Additional exploratory analyses
#### I Time incentives only for employed individuals
data_employed = filter(data, EM_employed == "1")
data_unemployed = filter(data, EM_employed == "0")
m_time_only_employed = glmer(donate_blood ~ age + gender + living_with_partner + education + cost_children_in_household + cost_type_of_community + IM + soc_time_normalized*incentive_time + EM_get_return*incentive_time + (1|country), data = data_employed, family = "binomial",control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m_time_only_employed)
# significant effects: IM (higher IM more), incentive x SOC interaction
m_time_unemployed = glmer(donate_blood ~ age + gender + living_with_partner + education + cost_children_in_household + cost_type_of_community + IM + soc_time_normalized*incentive_time + EM_get_return*incentive_time + (1|country), data = data_unemployed, family = "binomial",control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m_time_unemployed)
# significant effects: IM (higher IM more), incentive x SOC interaction
warning("Careful! In order to run this code, you need to clear the workspace and re-run only lines 0 - 120")
quit(save="ask")
nuts_level1_names = read.csv("../data/supp_data/nuts_level1_names.csv")
{stop("End of script?")}
# Add nuts 1 level to every respondent
data$nuts_level1_code = substr(data$nuts, 1, 3)
data = left_join(data, nuts_level1_names, by = "nuts_level1_code")
warning("Careful! In order to run these region-level analyses, you need to clear the workspace and re-run only lines 0 - 120")
# Eurobarometer (2014 wave)
eurobarometer_data_raw = read_dta("../../../P1_incentives/data/Eurobarometer/ZA5931_v3-0-0.dta")
# Incentive data
incentive_data_raw = read.csv("../data/expert_survey/incentive_data.csv")
################################################################
##### Process and combine data sets
# Select relevant variables
eurobarometer_data = dplyr::select(eurobarometer_data_raw, uniqid, nuts, nutslvl, isocntry, qe1_1, qe1_2, qe3_2, qe3_3, qe3_4, qe3_5, d15a, d60, qe5a_7, qe5a_8, d40b, d25, d11, d8r2, d10, d7)
incentive_data = dplyr::select(incentive_data_raw, -WB_incentive_financial_comment, -plasma_incentive_financial_comment, -WB_incentive_time_comment, -plasma_incentive_time_comment, -plasma_incentive_financial, -plasma_incentive_time)%>%
rename(incentive_financial = WB_incentive_financial, incentive_time = WB_incentive_time)
# Remove labels
eurobarometer_data = remove_all_labels(eurobarometer_data)
eurobarometer_data = zap_formats(eurobarometer_data)
# Rename columns
eurobarometer_data = rename(eurobarometer_data,
IM_help_people = qe3_2,
IM_alleviate_shortages = qe3_3,
IM_medical_research = qe3_4,
EM_get_return_raw = qe3_5,
EM_occupation = d15a,
EM_diff_paying_bills = d60,
social_norm_financial_indiv = qe5a_7,
social_norm_time_indiv = qe5a_8,
cost_children_in_household = d40b,
cost_type_of_community = d25,
age_raw = d11,
education = d8r2,
gender = d10,
marital_status = d7)
# Recode country code
eurobarometer_data$country_code = ifelse(eurobarometer_data$isocntry == "DE-W", "DE",
ifelse(eurobarometer_data$isocntry == "DE-E", "DE",
ifelse(eurobarometer_data$isocntry == "GB-GBN", "GB",
ifelse(eurobarometer_data$isocntry == "GB-NIR", "GB", eurobarometer_data$isocntry))))
# Change country_code format for merging
incentive_data$country_code = as.character(incentive_data$country_code)
# Merge datasets based on country
data = left_join(eurobarometer_data, incentive_data, by="country_code")
##### Preprocess combined dataset for analysis
# Variable transformations
data = data %>%
mutate(donate_blood = ifelse(qe1_1 == 1 | qe1_1 == 2, 1, 0),
IM_raw = ifelse(IM_help_people == 1 | IM_alleviate_shortages == 1 | IM_medical_research == 1, 1, 0),
EM_not_employed = ifelse(EM_occupation == 1 | EM_occupation == 2 | EM_occupation == 3 | EM_occupation == 4, 1, 0),
EM_employed = ifelse(EM_occupation == 1 | EM_occupation == 2 | EM_occupation == 3 | EM_occupation == 4, 0, 1),
education = ifelse(education == 11, 0, ifelse(education == 10 & age_raw>19, 3, ifelse(education == 10, NA, education))),
living_with_partner = ifelse(marital_status > 0 & marital_status < 9, 1, 0),
EM_diff_paying_bills = ifelse(EM_diff_paying_bills == 1, 2, ifelse(EM_diff_paying_bills == 2, 1, ifelse(EM_diff_paying_bills == 3, 0, NA))),
cost_type_of_community = ifelse(cost_type_of_community == 1, 2, ifelse(cost_type_of_community == 2, 1, ifelse(cost_type_of_community == 3, 0, NA))),
gender = gender - 1)%>%
mutate(IM = ifelse(is.na(IM_raw), 0, IM_raw),
EM_get_return = ifelse(is.na(EM_get_return_raw), 0, EM_get_return_raw))%>%
dplyr::select(-IM_help_people, -IM_alleviate_shortages, -IM_medical_research, -EM_occupation, -marital_status) #, -qe1_1, -qe1_2)
warning("Careful! In order to run these region-level analyses, you need to clear the workspace and re-run only lines 0 - 130")
# Get nuts level 1 names
nuts_level1_names = read.csv("../data/supp_data/nuts_level1_names.csv")
# Add nuts 1 level to every respondent
data$nuts_level1_code = substr(data$nuts, 1, 3)
data = left_join(data, nuts_level1_names, by = "nuts_level1_code")
# Aggregate social norms from individual responses at nuts-1 level
social_norms_nuts1 = data%>%
group_by(nuts_level1_code_alt)%>%
summarize(soc_financial_raw_regions = mean(social_norm_financial_indiv),
soc_time_raw_regions = mean(social_norm_time_indiv),
num_resp = n(),
nuts_level1_code = unique(nuts_level1_code))
# Add social norm data to dataset
data_full = left_join(data, social_norms_nuts1, by=c("nuts_level1_code_alt", "nuts_level1_code"))
# Convert variables to right format
data_full = data_full%>%
mutate(donate_blood = as.factor(donate_blood),
cost_type_of_community = as.factor(cost_type_of_community),
education = as.factor(education),
gender = as.factor(gender),
country_code = as.factor(country_code),
IM = as.factor(IM),
living_with_partner = as.factor(living_with_partner),
EM_get_return = as.factor(EM_get_return),
EM_diff_paying_bills = as.factor(EM_diff_paying_bills),
EM_not_employed = as.factor(EM_not_employed),
EM_employed = as.factor(EM_employed),
social_norm_financial_indiv = as.factor(social_norm_financial_indiv),
social_norm_time_indiv = as.factor(social_norm_time_indiv),
incentive_financial = as.factor(incentive_financial),
incentive_time = as.factor(incentive_time),
country = as.factor(country),
nuts_level1_code_alt = as.factor(nuts_level1_code_alt),
nuts_level1_code = as.factor(nuts_level1_code))
# Remove invalid data
data = filter(data_full, !is.na(donate_blood))
data = filter(data, age_raw > 17)
data = filter(data, num_resp > 99) # remove regions with less than 100 respondents
data$age = as.numeric(scale(data$age_raw))
data$cost_children_in_household = as.numeric(scale(data$cost_children_in_household))
data$soc_financial_normalized_regions = as.numeric(scale(data$soc_financial_raw_regions))
data$soc_time_normalized_regions = as.numeric(scale(data$soc_time_raw_regions))
data_excl_Germany = filter(data, country != "Germany") # for analyses regarding financial rewards, exclude Germany, because only country where "some blood operators" offer financial incentives
# A) Financial incentives
m_region_level_norms_financial = glmer(donate_blood ~ age + gender + living_with_partner + education + EM_not_employed + EM_diff_paying_bills + cost_children_in_household + cost_type_of_community + IM + EM_get_return*incentive_financial + incentive_financial*soc_financial_normalized_regions + (1|country) + (1|nuts_level1_code_alt), data = data_excl_Germany, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m_region_level_norms_financial)
# B) Time incentives
m_region_level_norms_time = glmer(donate_blood ~ age + gender + living_with_partner + education + EM_employed + cost_children_in_household + cost_type_of_community + IM + EM_get_return*incentive_time + soc_time_normalized_regions*incentive_time + (1|country) + (1|nuts_level1_code_alt), data = data, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m_region_level_norms_time)
newdata <- expand.grid(age = mean(data_excl_Germany$age, na.rm=TRUE),
gender = "1",  # Use 'c("0", "1")' if using 'facet_grid( ~ gender)' below
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data_excl_Germany$cost_children_in_household, na.rm=TRUE),
EM_not_employed = "0",
EM_diff_paying_bills = "0",
EM_get_return = "0",
IM = "1",
incentive_financial = c("0", "1"),
soc_financial_normalized_regions = sort(unique(data_excl_Germany$soc_financial_normalized_regions)))
pred_SOC_incentives_financial_normalized = newdata%>%
mutate(predictions = predict(m_region_level_norms_financial, newdata, type="response", re.form=NA)) # choose here as model either (a) m_region_level_norms_financial or (b) m_region_level_norms_financial_with_gender_interactions
# rename factor levels
pred_SOC_incentives_financial_normalized = pred_SOC_incentives_financial_normalized%>%
mutate(incentive_financial = recode(incentive_financial, "0"="no incentive offered", "1"="incentive offered"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
# make scatter plot
ggplot(pred_SOC_incentives_financial_normalized, aes(soc_financial_normalized_regions, predictions, color=incentive_financial)) +
stat_smooth(method="glm", formula=y~x, alpha=0.2, size=2, aes(fill=incentive_financial)) +
geom_point(position=position_jitter(height=0.03, width=0)) +
labs(y = "predicted probability of blood donation", x = "social norm for acceptability of financial incentive\n (normalized; region-level)", color = "financial incentive", title = "(A) Financial incentives") +
guides(fill = FALSE) +
theme(legend.position="bottom", plot.title = element_text(hjust = 0.5))#+
newdata <- expand.grid(age = mean(data$age, na.rm=TRUE),
gender = "1", # Use 'c("0", "1")' if using 'facet_grid( ~ gender)' below
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data$cost_children_in_household, na.rm=TRUE),
EM_employed = "1",
EM_get_return = "0",
IM = "1",
incentive_time = c("0", "0.5", "1"),
soc_time_normalized_regions = sort(unique(data$soc_time_normalized_regions)))
pred_region_level_norms_time = newdata%>%
mutate(predictions = predict(m_region_level_norms_time, newdata, type="response", re.form=NA)) # choose here as model either (a) m_region_level_norms_time or (b) m_region_level_norms_time_with_gender_interactions
# rename factor levels
pred_region_level_norms_time = pred_region_level_norms_time%>%
mutate(incentive_time = recode(incentive_time, "0"="no incentive offered", "0.5"="incentive dependent\non employer", "1"="incentive offered"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
# make scatter plot
ggplot(pred_region_level_norms_time, aes(soc_time_normalized_regions, predictions, color=incentive_time)) +
stat_smooth(method="glm", formula=y~x, alpha=0.2, size=2, aes(fill=incentive_time)) +
geom_point(position=position_jitter(height=0.03, width=0)) +
labs(y = "predicted probability of blood donation", x = "social norm for acceptability of time incentive (normalized; region-level)", color = "time incentive", title = "(B) Time incentives") +
guides(fill = FALSE) +
theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) #+
library("merTools")
newdata <- expand.grid(age = mean(data_excl_Germany$age, na.rm=TRUE),
gender = "1",
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data_excl_Germany$cost_children_in_household, na.rm=TRUE),
EM_not_employed = "0",
EM_diff_paying_bills = "0",
EM_get_return = "0",
IM = "1",
incentive_financial = c("0", "1"),
soc_financial_raw = sort(unique(data_excl_Germany$soc_financial_raw)),
country = "new country")
PI <- predictInterval(merMod = m2_raw, newdata = newdata, level = 0.8, n.sims = 1000, stat = "mean", type="probability", include.resid.var = F)
data_with_PI = bind_cols(newdata, PI)
# rename factor levels
data_with_PI = data_with_PI%>%
mutate(incentive_financial = recode(incentive_financial, "0"="no blood operators", "1"="all blood operators"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
newdata <- expand.grid(age = mean(data_excl_Germany$age, na.rm=TRUE),
gender = "1",  # Use 'c("0", "1")' if using 'facet_grid( ~ gender)' below
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data_excl_Germany$cost_children_in_household, na.rm=TRUE),
EM_not_employed = "0",
EM_diff_paying_bills = "0",
EM_get_return = "0",
IM = "1",
incentive_financial = c("0", "1"),
soc_financial_normalized_regions = sort(unique(data_excl_Germany$soc_financial_normalized_regions)),
country = "new country",
nuts_level1_code_alt = "new region")
PI <- predictInterval(merMod = m_region_level_norms_financial, newdata = newdata, level = 0.8, n.sims = 1000, stat = "mean", type="probability", include.resid.var = F)
data_with_PI = bind_cols(newdata, PI)
# rename factor levels
data_with_PI = data_with_PI%>%
mutate(incentive_financial = recode(incentive_financial, "0"="no incentive offered", "1"="incentive offered"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
c_with_CI = ggplot(data_with_PI, aes(x = soc_financial_normalized_regions, y=fit, ymin=lwr, ymax=upr, color=incentive_financial)) +
#stat_smooth(method="glm", formula=y~x, alpha=0.2, size=1.5, aes(fill=incentive_financial, ymin=lwr, ymax=upr)) +
#geom_point() +
#geom_errorbar(width=.005)+
geom_smooth(aes(ymin = lwr, ymax = upr,fill = incentive_financial), stat = "identity") +
labs(y = "predicted probability of blood donation", x = "social norm regarding financial incentives", color = "financial incentives offered") + #, title = "(A) Financial incentives") +
guides(fill = FALSE) +
theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) +
ggsave("plots/scatter/pred_region_level_norms_financial_w_out_gender_interaction_with_PI_smooth.png", width = 6, height = 5)
newdata <- expand.grid(age = mean(data$age, na.rm=TRUE),
gender = "1", # Use 'c("0", "1")' if using 'facet_grid( ~ gender)' below
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data$cost_children_in_household, na.rm=TRUE),
EM_employed = "1",
EM_get_return = "0",
IM = "1",
incentive_time = c("0", "0.5", "1"),
soc_time_normalized_regions = sort(unique(data$soc_time_normalized_regions)),
country = "new country",
nuts_level1_code_alt = "new region")
PI <- predictInterval(merMod = m_region_level_norms_time, newdata = newdata, level = 0.8, n.sims = 1000, stat = "mean", type="probability", include.resid.var = F)
data_with_PI = bind_cols(newdata, PI)
# rename factor levels
data_with_PI = data_with_PI%>%
mutate(incentive_time = recode(incentive_time, "0"="no incentive offered", "0.5"="incentive dependent\non employer", "1"="incentive offered"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
d_with_CI = ggplot(data_with_PI, aes(x = soc_time_normalized_regions, y=fit, ymin=lwr, ymax=upr, color=incentive_time)) +
#stat_smooth(method="glm", formula=y~x, alpha=0.2, size=1.5, aes(fill=incentive_time)) +
#geom_point() +
#geom_errorbar(width=.005)+
geom_smooth(aes(ymin = lwr, ymax = upr, fill = incentive_time), stat = "identity") +
labs(y = "predicted probability of blood donation", x = "social norm regarding time incentives", color = "time incentives offered") + #, title = "(B) Time incentives") +
guides(fill = FALSE) +
theme(legend.position="bottom", plot.title = element_text(hjust = 0.5))+
ggsave("plots/scatter/pred_region_level_norms_time_w_out_gender_interaction_with_PI_smooth.png", width = 6, height = 5)
# make combined plot for paper
ggarrange(c_with_CI, d_with_CI,
labels = c("A", "B"),
ncol = 1, nrow = 2) +
ggsave("plots/scatter/combined_pred_REGION_SOC_vertical_with_PI_smooth.png", width = 8, height = 12, units = "in") +
ggsave(file="plots/scatter/combined_pred_REGION_SOC_vertical_with_PI_smooth.pdf", width = 8, height = 12, units = "in")
# Eurobarometer (2014 wave)
eurobarometer_data_raw = read_dta("../../../P1_incentives/data/Eurobarometer/ZA5931_v3-0-0.dta")
# Incentive data
incentive_data_raw = read.csv("../data/expert_survey/incentive_data.csv")
################################################################
##### Process and combine data sets
# Select relevant variables
eurobarometer_data = dplyr::select(eurobarometer_data_raw, uniqid, nuts, nutslvl, isocntry, qe1_1, qe1_2, qe3_2, qe3_3, qe3_4, qe3_5, d15a, d60, qe5a_7, qe5a_8, d40b, d25, d11, d8r2, d10, d7)
incentive_data = dplyr::select(incentive_data_raw, -WB_incentive_financial_comment, -plasma_incentive_financial_comment, -WB_incentive_time_comment, -plasma_incentive_time_comment, -plasma_incentive_financial, -plasma_incentive_time)%>%
rename(incentive_financial = WB_incentive_financial, incentive_time = WB_incentive_time)
# Remove labels
eurobarometer_data = remove_all_labels(eurobarometer_data)
eurobarometer_data = zap_formats(eurobarometer_data)
# Rename columns
eurobarometer_data = rename(eurobarometer_data,
IM_help_people = qe3_2,
IM_alleviate_shortages = qe3_3,
IM_medical_research = qe3_4,
EM_get_return_raw = qe3_5,
EM_occupation = d15a,
EM_diff_paying_bills = d60,
social_norm_financial_indiv = qe5a_7,
social_norm_time_indiv = qe5a_8,
cost_children_in_household = d40b,
cost_type_of_community = d25,
age_raw = d11,
education = d8r2,
gender = d10,
marital_status = d7)
# Recode country code
eurobarometer_data$country_code = ifelse(eurobarometer_data$isocntry == "DE-W", "DE",
ifelse(eurobarometer_data$isocntry == "DE-E", "DE",
ifelse(eurobarometer_data$isocntry == "GB-GBN", "GB",
ifelse(eurobarometer_data$isocntry == "GB-NIR", "GB", eurobarometer_data$isocntry))))
# Change country_code format for merging
incentive_data$country_code = as.character(incentive_data$country_code)
# Merge datasets based on country
data = left_join(eurobarometer_data, incentive_data, by="country_code")
##### Preprocess combined dataset for analysis
# Variable transformations
data = data %>%
mutate(donate_blood = ifelse(qe1_1 == 1 | qe1_1 == 2, 1, 0),
IM_raw = ifelse(IM_help_people == 1 | IM_alleviate_shortages == 1 | IM_medical_research == 1, 1, 0),
EM_not_employed = ifelse(EM_occupation == 1 | EM_occupation == 2 | EM_occupation == 3 | EM_occupation == 4, 1, 0),
EM_employed = ifelse(EM_occupation == 1 | EM_occupation == 2 | EM_occupation == 3 | EM_occupation == 4, 0, 1),
education = ifelse(education == 11, 0, ifelse(education == 10 & age_raw>19, 3, ifelse(education == 10, NA, education))),
living_with_partner = ifelse(marital_status > 0 & marital_status < 9, 1, 0),
EM_diff_paying_bills = ifelse(EM_diff_paying_bills == 1, 2, ifelse(EM_diff_paying_bills == 2, 1, ifelse(EM_diff_paying_bills == 3, 0, NA))),
cost_type_of_community = ifelse(cost_type_of_community == 1, 2, ifelse(cost_type_of_community == 2, 1, ifelse(cost_type_of_community == 3, 0, NA))),
gender = gender - 1)%>%
mutate(IM = ifelse(is.na(IM_raw), 0, IM_raw),
EM_get_return = ifelse(is.na(EM_get_return_raw), 0, EM_get_return_raw))%>%
dplyr::select(-IM_help_people, -IM_alleviate_shortages, -IM_medical_research, -EM_occupation, -marital_status) #, -qe1_1, -qe1_2)
# Aggregate social norms from individual responses at country level
social_norms = data%>%
group_by(country_code)%>%
summarize(soc_financial_raw = mean(social_norm_financial_indiv),
soc_time_raw = mean(social_norm_time_indiv))%>%
#mutate(soc_financial_biased = scales::rescale(soc_financial_raw, to = c(-1, 1), from = c(0,0.5)))%>%
mutate(soc_financial = scales::rescale(soc_financial_raw, to = c(-1, 1), from = c(0,1)),
soc_time = scales::rescale(soc_time_raw, to = c(-1, 1), from = c(0,1)))
# Add social norm data to dataset
data_full = left_join(data, social_norms, by="country_code")
# Convert variables to right format
data_full = data_full%>%
mutate(donate_blood = as.factor(donate_blood),
cost_type_of_community = as.factor(cost_type_of_community),
education = as.factor(education),
gender = as.factor(gender),
country_code = as.factor(country_code),
IM = as.factor(IM),
living_with_partner = as.factor(living_with_partner),
EM_get_return = as.factor(EM_get_return),
EM_diff_paying_bills = as.factor(EM_diff_paying_bills),
EM_not_employed = as.factor(EM_not_employed),
EM_employed = as.factor(EM_employed),
social_norm_financial_indiv = as.factor(social_norm_financial_indiv),
social_norm_time_indiv = as.factor(social_norm_time_indiv),
incentive_financial = as.factor(incentive_financial),
incentive_time = as.factor(incentive_time),
country = as.factor(country))
################################################################
##### Descriptives: number of respondents
## Raw data: number of respondents
nrow(data_full) # 27868
# Remove invalid data
data = filter(data_full, !is.na(donate_blood))
nrow(data) # 27082
(nrow(data_full) - nrow(data)) / nrow(data_full) # 2.8%
# Remove respondents under 18
data_full = filter(data_full, age_raw > 17)
data = filter(data, age_raw > 17)
nrow(data) # 26532
(27082 - 26532) / 27868 # 2.0 % additionally excluded due to age
data$age = as.numeric(scale(data$age_raw))
data$cost_children_in_household = as.numeric(scale(data$cost_children_in_household))
data$soc_financial_normalized = as.numeric(scale(data$soc_financial_raw))
data$soc_time_normalized = as.numeric(scale(data$soc_time_raw))
# FOR FINANCIAL ANALYSES: Construct data frame without Germany, because it is the only country where incentives = 0.5 (i.e., incentives provided by some blood operators)
# Excluding Germany, regrouping it to incentive = 0 or regrouping it to incentive = 1 yields the same qualitative and quantitative results
data_excl_Germany = filter(data, country != "Germany")
# B) raw SOC (raw values of social norms, for better interpretability/readability)
m2_raw = glmer(donate_blood ~ age + gender + living_with_partner + education + EM_not_employed + EM_diff_paying_bills + cost_children_in_household + cost_type_of_community + IM + EM_get_return*incentive_financial + soc_financial_raw*incentive_financial + (1|country), data = data_excl_Germany, family = "binomial",control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# B) raw SOC
m4_raw = glmer(donate_blood ~ age + gender + living_with_partner + education + EM_employed + cost_children_in_household + cost_type_of_community + IM + EM_get_return*incentive_time + soc_time_raw*incentive_time + (1|country), data = data, family = "binomial",control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
library("merTools")
newdata <- expand.grid(age = mean(data_excl_Germany$age, na.rm=TRUE),
gender = "1",
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data_excl_Germany$cost_children_in_household, na.rm=TRUE),
EM_not_employed = "0",
EM_diff_paying_bills = "0",
EM_get_return = "0",
IM = "1",
incentive_financial = c("0", "1"),
soc_financial_raw = sort(unique(data_excl_Germany$soc_financial_raw)),
country = "new country")
PI <- predictInterval(merMod = m2_raw, newdata = newdata, level = 0.8, n.sims = 1000, stat = "mean", type="probability", include.resid.var = F)
data_with_PI = bind_cols(newdata, PI)
# rename factor levels
data_with_PI = data_with_PI%>%
mutate(incentive_financial = recode(incentive_financial, "0"="no blood operators", "1"="all blood operators"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
a_with_CI = ggplot(data_with_PI, aes(x = soc_financial_raw, y=fit, ymin=lwr, ymax=upr, color=incentive_financial)) +
#stat_smooth(method="glm", formula=y~x, alpha=0.2, size=1.5, aes(fill=incentive_financial, ymin=lwr, ymax=upr)) +
#geom_point() +
#geom_errorbar(width=.005)+
geom_smooth(aes(ymin = lwr, ymax = upr,fill = incentive_financial), stat = "identity") +
labs(y = "predicted probability of blood donation", x = "social norm regarding financial incentives", color = "financial incentives offered") + #, title = "(A) Financial incentives") +
guides(fill = FALSE) +
theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) +
expand_limits(y = 0)+
ggsave("plots/scatter/pred_SOC_incentives_financial_raw_with_PI_smooth.png", width = 8, height = 5)
newdata <- expand.grid(age = mean(data$age, na.rm=TRUE),
gender = "1",
living_with_partner="1",
education = "2",
cost_type_of_community = "1",
cost_children_in_household = mean(data$cost_children_in_household, na.rm=TRUE),
EM_employed = "1",
EM_get_return = "0",
IM = "1",
incentive_time = c("0", "0.5", "1"),
soc_time_raw = sort(unique(data$soc_time_raw)),
country = "new country")
PI <- predictInterval(merMod = m4_raw, newdata = newdata, level = 0.8, n.sims = 1000, stat = "mean", type="probability", include.resid.var = F)
data_with_PI = bind_cols(newdata, PI)
# rename factor levels
data_with_PI = data_with_PI%>%
mutate(incentive_time = recode(incentive_time, "0"="no blood operators", "0.5"="dependent on employer", "1"="all blood operators"),
gender = recode(gender, "0"="male", "1"="female"),
IM = recode(IM, "0"="not intrinsically motivated", "1"="intrinsically motivated"))
b_with_CI = ggplot(data_with_PI, aes(x = soc_time_raw, y=fit, ymin=lwr, ymax=upr, color=incentive_time)) +
#stat_smooth(method="glm", formula=y~x, alpha=0.2, size=1.5, aes(fill=incentive_time)) +
#geom_point() +
#geom_errorbar(width=.005)+
geom_smooth(aes(ymin = lwr, ymax = upr, fill = incentive_time), stat = "identity") +
labs(y = "predicted probability of blood donation", x = "social norm regarding time incentives", color = "time incentives offered") + #, title = "(B) Time incentives") +
guides(fill = FALSE) +
theme(legend.position="bottom", plot.title = element_text(hjust = 0.5))+
expand_limits(y = 0)+
ggsave("plots/scatter/pred_SOC_incentives_time_raw_with_PI_smooth.png", width = 8, height = 5)
# make combined plot for paper
ggarrange(a_with_CI, b_with_CI,
labels = c("A", "B"),
ncol = 2, nrow = 1) +
ggsave("plots/scatter/combined_pred_SOC_horizontal_with_PI_smooth.png", width = 13, height = 5.7, units = "in") +
ggsave(file="plots/scatter/combined_pred_SOC_horizontal_with_PI_smooth.pdf", width = 13, height = 5.7, units = "in")
